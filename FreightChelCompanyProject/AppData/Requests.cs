//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FreightChelCompanyProject.AppData
{
    using System;
    using System.Collections.Generic;
    using System.Linq;

    public partial class Requests
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Requests()
        {
            this.ProdsInRequests = new HashSet<ProdsInRequests>();
        }
    
        public int Id { get; set; }
        public int NumWorker { get; set; }
        public int NumClient { get; set; }
        public string AddressDel { get; set; }
        public System.DateTime DateStart { get; set; }
        public Nullable<System.DateTime> DateEnd { get; set; }
        public string Status { get; set; }
        public int ArchStatus { get; set; }
        public decimal TotalWeight
        {
            get
            {
                var prodInOrderList = FreightChelCompanyEntities.GetContext().ProdsInRequests.Where(p => p.RequeId == Id).ToList();
                decimal sum = 0;
                foreach (var pos in prodInOrderList)
                {
                    foreach (var prod in FreightChelCompanyEntities.GetContext().Products)
                    {
                        if (prod.Id == pos.ProdId)
                        {
                            sum = sum + (decimal)pos.Quantity * (decimal)prod.Weight;
                        }
                    }
                }

                return sum;
            }
        }
        public string CheckOrder
        {
            get
            {
                var orderId = FreightChelCompanyEntities.GetContext().Orders.Where(p => p.Id == Id).ToList();

                if (orderId.Count() > 0)
                {
                    return orderId[0].Status;
                }
                else
                {
                    return "Отсутствует";
                }
            }
        }
        public virtual Clients Clients { get; set; }
        public virtual Orders Orders { get; set; }
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<ProdsInRequests> ProdsInRequests { get; set; }
        public virtual Workers Workers { get; set; }
    }
}